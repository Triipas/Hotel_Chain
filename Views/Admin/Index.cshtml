<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StayGo - Panel de Administración</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap" rel="stylesheet">

    <style>
        /* RESET Y BASE */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            height: 100vh;
            overflow: hidden; /* Evitar scroll doble */
        }

        /* LAYOUT PRINCIPAL CORREGIDO */
        .admin-layout {
            display: flex;
            height: 100vh;
        }

        /* SIDEBAR FIJO */
        .admin-sidebar {
            width: 260px;
            background-color: #ffffff;
            border-right: 1px solid #e0e0e0;
            box-shadow: 2px 0 8px rgba(0, 0, 0, 0.08);
            display: flex;
            flex-direction: column;
            position: fixed;
            left: 0;
            top: 0;
            height: 100vh;
            z-index: 1000;
        }

        /* CONTENIDO PRINCIPAL */
        .admin-main {
            flex: 1;
            margin-left: 260px; /* Espacio para el sidebar */
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        /* HEADER SUPERIOR */
        .admin-header {
            background-color: #fff;
            padding: 1rem 2rem;
            border-bottom: 1px solid #e0e0e0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.08);
            display: flex;
            justify-content: flex-end;
            align-items: center;
            height: 70px;
            flex-shrink: 0;
        }

        /* ÁREA DE CONTENIDO CON SCROLL */
        .admin-content {
            flex: 1;
            padding: 2rem;
            overflow-y: auto; /* Scroll solo en el contenido */
            overflow-x: hidden;
            background-color: #f8f9fa;
        }

        /* LOGO Y NAVEGACIÓN EN SIDEBAR */
        .admin-logo {
            font-family: 'Poppins', sans-serif;
            font-size: 1.8rem;
            font-weight: 600;
            color: #2c3e50;
            padding: 1.5rem;
            border-bottom: 1px solid #f0f0f0;
        }

        .admin-logo span {
            color: #3498db; 
        }

        .admin-nav {
            flex: 1;
            padding: 1rem 0;
            overflow-y: auto;
        }

        .admin-nav a {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 0.75rem 1.5rem;
            color: #7f8c8d;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
        }

        .admin-nav a:hover,
        .admin-nav a.active {
            color: #3498db;
            background-color: rgba(52, 152, 219, 0.1);
            border-left-color: #3498db;
        }

        .admin-nav a i {
            width: 20px;
            text-align: center;
        }

        /* USUARIO EN SIDEBAR */
        .admin-user {
            padding: 1rem 1.5rem;
            border-top: 1px solid #f0f0f0;
            background-color: #f8f9fa;
        }

        .admin-user span {
            display: block;
            font-size: 0.9rem;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

        .admin-user a {
            color: #ff6b6b;
            text-decoration: none;
            font-size: 0.9rem;
            padding: 0.3rem 0.8rem;
            border-radius: 4px;
            transition: background-color 0.3s;
            display: inline-block;
        }

        .admin-user a:hover {
            background-color: rgba(255, 107, 107, 0.1);
        }

        /* HEADER SUPERIOR DERECHO */
        .header-right {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-info {
            text-align: right;
            margin-right: 1rem;
        }

        .user-name {
            font-weight: 600;
            color: #2c3e50;
        }

        .user-role {
            font-size: 0.85rem;
            color: #7f8c8d;
        }

        /* CONTENIDO Y CARDS MEJORADOS */
        .welcome-panel {
            margin-bottom: 2rem;
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        }

        .welcome-greeting {
            margin-bottom: 1rem;
        }

        .greet-line {
            font-size: 1.1rem;
            color: #374151;           
            font-weight: 500;
        }

        .welcome-name {
            color: #3498db;   
            font-weight: 700;
        }

        .greet-sub {
            font-size: 0.9rem;
            color: #6b7280;             
            margin-top: 0.25rem;
        }

        .panel-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 1rem;
        }

        .toolbar-inline {
            display: flex;
            gap: 0.75rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .toolbar-inline input[type="search"] {
            flex: 1;
            min-width: 250px;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: 1px solid #e6e9ee;
            font-size: 0.95rem;
            outline: none;
            transition: all 0.3s;
            background: #ffffff;
        }

        .toolbar-inline input[type="search"]:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        /* BOTONES MEJORADOS */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .btn-success {
            background: #27ae60;
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-edit {
            background: #f39c12;
            color: white;
            padding: 0.5rem 0.75rem;
            font-size: 0.85rem;
        }

        .btn-delete {
            background: #e74c3c;
            color: white;
            padding: 0.5rem 0.75rem;
            font-size: 0.85rem;
        }

        /* CARDS Y CONTENIDO */
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .card-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid #f0f0f0;
            background: #fafbfc;
        }

        .card-body {
            padding: 2rem;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .page-header h1 {
            margin: 0;
            color: #2c3e50;
            font-size: 1.75rem;
        }

        /* DASHBOARD GRID */
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .metric-card {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            text-align: center;
            transition: transform 0.2s;
        }

        .metric-card:hover {
            transform: translateY(-2px);
        }

        .metric-card h3 {
            font-size: 0.9rem;
            color: #7f8c8d;
            margin-bottom: 1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .metric {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 0;
        }

        .metric.blue { color: #3498db; }
        .metric.red { color: #e74c3c; }
        .metric.green { color: #2ecc71; }
        .metric.orange { color: #f39c12; }

        /* TABLAS MEJORADAS */
        .table-container {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }

        .table-wrapper {
            overflow-x: auto;
            max-height: 70vh; /* Altura máxima para el scroll */
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th {
            background: #f8f9fa;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #2c3e50;
            border-bottom: 2px solid #e9ecef;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        td {
            padding: 1rem;
            border-bottom: 1px solid #f0f0f0;
            vertical-align: middle;
        }

        tr:hover {
            background-color: #f8f9fa;
        }

        td:last-child {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        td:last-child .btn {
            width: 120px; /* o el valor que prefieras */
            text-align: center;
        }

        /* MODALES MEJORADOS */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(4px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: #fff;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            animation: modalSlideIn 0.3s ease;
        }

        @@keyframes modalSlideIn {
            from { 
                opacity: 0; 
                transform: translateY(-50px) scale(0.95); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            margin: 0;
            font-size: 1.25rem;
            color: #2c3e50;
        }

        .close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #aaa;
            transition: color 0.3s;
        }

        .close:hover {
            color: #333;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid #e9ecef;
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
        }

        /* FORMULARIOS */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 0.9rem;
            transition: border-color 0.3s;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        /* ALERTAS */
        .alert {
            padding: 0.75rem 1rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            display: none;
        }

        .alert.show {
            display: block;
            animation: alertSlideIn 0.3s ease;
        }

        @@keyframes alertSlideIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .alert-success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .alert-error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        /* RESPONSIVE */
        @@media (max-width: 768px) {
            .admin-sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s;
            }
            
            .admin-main {
                margin-left: 0;
            }
            
            .toolbar-inline {
                flex-direction: column;
                align-items: stretch;
            }
            
            .toolbar-inline input[type="search"] {
                min-width: 100%;
            }
        }

        /* LOADING SPINNER */
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-right: 10px;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* SCROLLBAR PERSONALIZADA */
        .admin-content::-webkit-scrollbar,
        .table-wrapper::-webkit-scrollbar {
            width: 8px;
        }

        .admin-content::-webkit-scrollbar-track,
        .table-wrapper::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .admin-content::-webkit-scrollbar-thumb,
        .table-wrapper::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }

        .admin-content::-webkit-scrollbar-thumb:hover,
        .table-wrapper::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
    </style>
</head>
<body>
    <div class="admin-layout">
        <!-- SIDEBAR -->
        <aside class="admin-sidebar">
            <div class="admin-logo">
                Stay<span>Go</span>
            </div>
            
            <nav class="admin-nav">
                <a href="#" onclick="navigateTo('dashboard')" class="active">
                    <i class="fas fa-chart-line"></i> Dashboard
                </a>
                <a href="#" onclick="navigateTo('usuarios')">
                    <i class="fas fa-users"></i> Usuarios
                </a>
                <a href="#" onclick="navigateTo('hoteles')">
                    <i class="fas fa-hotel"></i> Hoteles
                </a>
                <a href="#" onclick="navigateTo('habitaciones')">
                    <i class="fas fa-bed"></i> Habitaciones
                </a>
                <a href="#" onclick="navigateTo('reservas')">
                    <i class="fas fa-calendar-check"></i> Reservas 
                </a>
                <a href="#" onclick="navigateTo('financiero')">
                    <i class="fas fa-dollar-sign"></i> Financiero
                </a>
                <a href="/" target="_blank">
                    <i class="fas fa-globe"></i> Ver Sitio Cliente
                </a>
            </nav>

            <div class="admin-user">
                <span>👤 @ViewBag.AdminName</span>
                <span style="font-size: 0.8rem; color: #7f8c8d;">@ViewBag.AdminPuesto</span>
                <a href="/admin/logout">Cerrar Sesión</a>
            </div>
        </aside>

        <!-- CONTENIDO PRINCIPAL -->
        <main class="admin-main">
            <!-- HEADER SUPERIOR -->
            <header class="admin-header">
                <div class="header-right">
                    <div class="user-info">
                        <div class="user-name">@ViewBag.AdminName</div>
                        <div class="user-role">@ViewBag.AdminPuesto</div>
                    </div>
                </div>
            </header>

            <!-- CONTENIDO CON SCROLL -->
            <div class="admin-content">
                <!-- ALERTAS GLOBALES -->
                <div id="alert-container"></div>
            
                <!-- CONTENIDO DINÁMICO -->
                <div id="app">
                    <div class="card">
                        <div class="card-body">
                            <div style="text-align: center; padding: 2rem;">
                                <div class="spinner"></div>
                                Cargando panel de administración...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modal para Crear/Editar Hotel -->
    <div id="hotelModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="hotelModalTitle">Crear Hotel</h2>
                <button class="close" onclick="closeHotelModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="hotelForm">
                    <input type="hidden" id="hotelId" name="hotelId">
                    
                    <div class="form-group">
                        <label for="nombre">Nombre del Hotel *</label>
                        <input type="text" id="nombre" name="nombre" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="direccion">Dirección *</label>
                        <input type="text" id="direccion" name="direccion" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="ciudad">Ciudad *</label>
                        <select id="ciudad" name="ciudad" required>
                            <option value="">Seleccionar ciudad</option>
                            <option value="Lima">Lima</option>
                            <option value="Cusco">Cusco</option>
                            <option value="Arequipa">Arequipa</option>
                            <option value="Trujillo">Trujillo</option>
                            <option value="Piura">Piura</option>
                            <option value="Iquitos">Iquitos</option>
                            <option value="Huancayo">Huancayo</option>
                            <option value="Tacna">Tacna</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="descripcion">Descripción</label>
                        <textarea id="descripcion" name="descripcion" placeholder="Describe las características del hotel..."></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="telefonoContacto">Teléfono de Contacto</label>
                        <input type="tel" id="telefonoContacto" name="telefonoContacto" placeholder="Ej: +51 999 999 999">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeHotelModal()">Cancelar</button>
                <button type="button" class="btn btn-success" onclick="saveHotel()" id="saveHotelBtn">
                    <span id="saveHotelText">Guardar</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Modal para Crear/Editar Habitación -->
    <div id="habitacionModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="habitacionModalTitle">Crear Habitación</h2>
                <button class="close" onclick="closeHabitacionModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="habitacionForm">
                    <input type="hidden" id="habitacionId" name="habitacionId">
                    
                    <div class="form-group">
                        <label for="habitacionHotelId">Hotel *</label>
                        <select id="habitacionHotelId" name="hotelId" required>
                            <option value="">Seleccionar hotel</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="numeroHabitacion">Número de Habitación *</label>
                        <input type="text" id="numeroHabitacion" name="numeroHabitacion" required placeholder="Ej: 101, A-205, Suite Premium">
                    </div>
                    
                    <div class="form-group">
                        <label for="tipo">Tipo de Habitación *</label>
                        <select id="tipo" name="tipo" required>
                            <option value="">Seleccionar tipo</option>
                            <option value="simple">Simple</option>
                            <option value="doble">Doble</option>
                            <option value="suite">Suite</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="capacidad">Capacidad (personas) *</label>
                        <input type="number" id="capacidad" name="capacidad" required min="1" max="10" placeholder="Ej: 2">
                    </div>
                    
                    <div class="form-group">
                        <label for="precioNoche">Precio por Noche (S/) *</label>
                        <input type="number" id="precioNoche" name="precioNoche" required min="0" step="0.01" placeholder="Ej: 150.00">
                    </div>
                    
                    <div class="form-group">
                        <label for="descripcionHab">Descripción</label>
                        <textarea id="descripcionHab" name="descripcionHab" placeholder="Describe las características de la habitación..."></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="disponible" name="disponible" checked>
                            Habitación disponible
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeHabitacionModal()">Cancelar</button>
                <button type="button" class="btn btn-success" onclick="saveHabitacion()" id="saveHabitacionBtn">
                    <span id="saveHabitacionText">Guardar</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Scripts del SPA -->
    <script>
        // Variables globales
        let currentEditingHotelId = null;
        let currentEditingHabitacionId = null;
        let isEditMode = false;
        let isEditModeHabitacion = false;

        // Simple SPA Router para el admin
        class AdminApp {
            constructor() {
                this.currentView = 'dashboard';
                this.apiBase = '/api';
                this.init();
            }

            init() {
                this.loadView(this.currentView);
            }

            async loadView(view) {
                const appElement = document.getElementById('app');
                
                // Actualizar navegación activa
                document.querySelectorAll('.admin-nav a').forEach(a => a.classList.remove('active'));
                document.querySelector(`[onclick="navigateTo('${view}')"]`)?.classList.add('active');
                
                switch(view) {
                    case 'dashboard':
                        appElement.innerHTML = await this.renderDashboard();
                        break;
                    case 'hoteles':
                        appElement.innerHTML = await this.renderHoteles();
                        break;
                    case 'habitaciones':
                        appElement.innerHTML = await this.renderHabitaciones();
                        break;
                    case 'reservas':
                        appElement.innerHTML = this.renderReservas();
                        break;
                    case 'usuarios':
                        appElement.innerHTML = this.renderUsuarios();
                        break;
                    case 'financiero':
                        appElement.innerHTML = this.renderFinanciero();
                        break;
                    default:
                        appElement.innerHTML = '<div class="card"><div class="card-body"><h2>Vista no encontrada</h2></div></div>';
                }
            }

            async renderDashboard() {
                try {
                    // Obtener estadísticas básicas
                    const hotelesResponse = await fetch(`${this.apiBase}/hotelesapi`);
                    const hoteles = hotelesResponse.ok ? await hotelesResponse.json() : [];

                    const habitacionesResponse = await fetch(`${this.apiBase}/habitacionesapi`);
                    const habitaciones = habitacionesResponse.ok ? await habitacionesResponse.json() : [];

                    return `
                        <!-- HEADER CONTEXTUAL PARA DASHBOARD -->
                        <section class="welcome-panel">
                            <div class="welcome-greeting">
                                <div class="greet-line">Hola, <span class="welcome-name">@ViewBag.AdminName</span></div>
                                <div class="greet-sub">Que tengas un bonito día</div>
                            </div>

                            <div class="page-info">
                                <h1 class="panel-title">Dashboard General</h1>
                                <div class="toolbar-inline">
                                    <input type="search" placeholder="Buscar en el sistema..." aria-label="Buscar" />
                                    <button class="btn btn-secondary">
                                        <i class="fas fa-chart-bar"></i> Ver Reportes
                                    </button>
                                    <button class="btn btn-success">
                                        <i class="fas fa-sync-alt"></i> Actualizar Datos
                                    </button>
                                </div>
                            </div>
                        </section>

                        <div class="dashboard-grid">
                            <div class="metric-card">
                                <h3>Total Hoteles</h3>
                                <div class="metric blue">${hoteles.length}</div>
                            </div>
                            <div class="metric-card">
                                <h3>Total Habitaciones</h3>
                                <div class="metric red">${habitaciones.length}</div>
                            </div>
                            <div class="metric-card">
                                <h3>Reservas Activas</h3>
                                <div class="metric green">-</div>
                            </div>
                            <div class="metric-card">
                                <h3>Total Usuarios</h3>
                                <div class="metric orange">-</div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <div class="card-header">
                                <h3>Accesos Rápidos</h3>
                            </div>
                            <div class="card-body">
                                <p>Gestiona todos los aspectos de tu cadena hotelera desde aquí:</p>
                                <br>
                                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                                    <button class="btn btn-success" onclick="navigateTo('hoteles')">
                                        <i class="fas fa-hotel"></i> Gestionar Hoteles
                                    </button>
                                    <button class="btn btn-success" onclick="navigateTo('habitaciones')">
                                        <i class="fas fa-bed"></i> Gestionar Habitaciones
                                    </button>
                                    <button class="btn btn-success" onclick="navigateTo('reservas')">
                                        <i class="fas fa-calendar-check"></i> Ver Reservas
                                    </button>
                                    <button class="btn btn-success" onclick="navigateTo('usuarios')">
                                        <i class="fas fa-users"></i> Gestionar Usuarios
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                } catch (error) {
                    return `
                        <div class="card">
                            <div class="card-body">
                                <h1>Dashboard</h1>
                                <p>Error al cargar estadísticas: ${error.message}</p>
                            </div>
                        </div>
                    `;
                }
            }

            async renderHoteles() {
                try {
                    const response = await fetch(`${this.apiBase}/hotelesapi`);
                    if (!response.ok) {
                        throw new Error(`Error: ${response.status}`);
                    }
                    const hoteles = await response.json();
                    
                    return `
                        <!-- HEADER CONTEXTUAL PARA HOTELES -->
                        <section class="welcome-panel">
                            <div class="page-info">
                                <h1 class="panel-title">Gestión de Hoteles</h1>
                                <div class="toolbar-inline">
                                    <input type="search" placeholder="Buscar hoteles por nombre o ciudad..." aria-label="Buscar hoteles" />
                                    <button class="btn btn-secondary">
                                        <i class="fas fa-filter"></i> Filtrar por Ciudad
                                    </button>
                                    <button class="btn btn-success" onclick="openCreateHotelModal()">
                                        <i class="fas fa-plus"></i> Agregar Hotel
                                    </button>
                                </div>
                            </div>
                        </section>
                        
                        <div class="table-container">
                            <div class="table-wrapper">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Nombre</th>
                                            <th>Ciudad</th>
                                            <th>Dirección</th>
                                            <th>Teléfono</th>
                                            <th>Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${hoteles.map(hotel => `
                                            <tr>
                                                <td>${hotel.hotelId || hotel.HotelId}</td>
                                                <td><strong>${hotel.nombre || hotel.Nombre}</strong></td>
                                                <td>${hotel.ciudad || hotel.Ciudad}</td>
                                                <td>${hotel.direccion || hotel.Direccion}</td>
                                                <td>${hotel.telefonoContacto || hotel.TelefonoContacto || 'N/A'}</td>
                                                <td>
                                                    <button class="btn btn-edit" onclick="editHotel(${hotel.hotelId || hotel.HotelId})">
                                                        <i class="fas fa-edit"></i> Editar
                                                    </button>
                                                    <button class="btn btn-delete" onclick="deleteHotel(${hotel.hotelId || hotel.HotelId}, '${hotel.nombre || hotel.Nombre}')">
                                                        <i class="fas fa-trash"></i> Eliminar
                                                    </button>
                                                </td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                                ${hoteles.length === 0 ? '<div style="text-align: center; padding: 3rem; color: #666;"><i class="fas fa-hotel" style="font-size: 3rem; margin-bottom: 1rem; display: block;"></i>No hay hoteles registrados</div>' : ''}
                            </div>
                        </div>
                    `;
                } catch (error) {
                    return `
                        <div class="card">
                            <div class="card-body">
                                <h1>Error al cargar hoteles</h1>
                                <p><strong>Error:</strong> ${error.message}</p>
                                <p>Verifica que la API esté funcionando en <a href="/api/hotelesapi" target="_blank">/api/hotelesapi</a></p>
                            </div>
                        </div>
                    `;
                }
            }

            async renderHabitaciones() {
                try {
                    const response = await fetch(`${this.apiBase}/habitacionesapi`);
                    if (!response.ok) {
                        throw new Error(`Error: ${response.status}`);
                    }
                    const habitaciones = await response.json();
                    
                    return `
                        <!-- HEADER CONTEXTUAL PARA HABITACIONES -->
                        <section class="welcome-panel">
                            <div class="page-info">
                                <h1 class="panel-title">Gestión de Habitaciones</h1>
                                <div class="toolbar-inline">
                                    <input type="search" placeholder="Buscar habitaciones por número o hotel..." aria-label="Buscar habitaciones" />
                                    <button class="btn btn-secondary">
                                        <i class="fas fa-filter"></i> Filtrar por Tipo
                                    </button>
                                    <button class="btn btn-success" onclick="openCreateHabitacionModal()">
                                        <i class="fas fa-plus"></i> Agregar Habitación
                                    </button>
                                </div>
                            </div>
                        </section>
                        
                        <div class="table-container">
                            <div class="table-wrapper">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Hotel</th>
                                            <th>Número</th>
                                            <th>Tipo</th>
                                            <th>Capacidad</th>
                                            <th>Precio/Noche</th>
                                            <th>Disponible</th>
                                            <th>Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${habitaciones.map(hab => `
                                            <tr>
                                                <td>${hab.habitacionId || hab.HabitacionId}</td>
                                                <td><strong>${(hab.hotel && hab.hotel.nombre) || (hab.Hotel && hab.Hotel.Nombre) || 'N/A'}</strong></td>
                                                <td>${hab.numeroHabitacion || hab.NumeroHabitacion}</td>
                                                <td>
                                                    <span style="
                                                        background: ${hab.tipo === 'suite' || hab.Tipo === 'suite' ? '#f39c12' : 
                                                                    hab.tipo === 'doble' || hab.Tipo === 'doble' ? '#3498db' : '#27ae60'};
                                                        color: white;
                                                        padding: 4px 12px;
                                                        border-radius: 16px;
                                                        font-size: 0.8rem;
                                                        font-weight: 500;
                                                        text-transform: capitalize;
                                                    ">
                                                        ${hab.tipo || hab.Tipo}
                                                    </span>
                                                </td>
                                                <td>${hab.capacidad || hab.Capacidad} personas</td>
                                                <td><strong>S/ ${(hab.precioNoche || hab.PrecioNoche)?.toFixed(2)}</strong></td>
                                                <td>
                                                    <span style="
                                                        color: ${hab.disponible !== false && hab.Disponible !== false ? '#27ae60' : '#e74c3c'};
                                                        font-weight: bold;
                                                    ">
                                                        ${hab.disponible !== false && hab.Disponible !== false ? '✓ Sí' : '✗ No'}
                                                    </span>
                                                </td>
                                                <td>
                                                    <button class="btn btn-edit" onclick="editHabitacion(${hab.habitacionId || hab.HabitacionId})">
                                                        <i class="fas fa-edit"></i> Editar
                                                    </button>
                                                    <button class="btn btn-delete" onclick="deleteHabitacion(${hab.habitacionId || hab.HabitacionId}, '${hab.numeroHabitacion || hab.NumeroHabitacion}')">
                                                        <i class="fas fa-trash"></i> Eliminar
                                                    </button>
                                                </td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                                ${habitaciones.length === 0 ? '<div style="text-align: center; padding: 3rem; color: #666;"><i class="fas fa-bed" style="font-size: 3rem; margin-bottom: 1rem; display: block;"></i>No hay habitaciones registradas</div>' : ''}
                            </div>
                        </div>
                    `;
                } catch (error) {
                    return `
                        <div class="card">
                            <div class="card-body">
                                <h1>Error al cargar habitaciones</h1>
                                <p><strong>Error:</strong> ${error.message}</p>
                                <p>Verifica que la API esté funcionando en <a href="/api/habitacionesapi" target="_blank">/api/habitacionesapi</a></p>
                            </div>
                        </div>
                    `;
                }
            }

            renderReservas() {
                return `
                    <!-- HEADER CONTEXTUAL PARA RESERVAS -->
                    <section class="welcome-panel">
                        <div class="page-info">
                            <h1 class="panel-title">Gestión de Reservas</h1>
                            <div class="toolbar-inline">
                                <input type="search" placeholder="Buscar reservas por huésped o habitación..." aria-label="Buscar reservas" />
                                <button class="btn btn-secondary">
                                    <i class="fas fa-calendar"></i> Filtrar por Fecha
                                </button>
                                <button class="btn btn-success">
                                    <i class="fas fa-plus"></i> Nueva Reserva
                                </button>
                            </div>
                        </div>
                    </section>

                    <div class="card">
                        <div class="card-body">
                            <div style="text-align: center; padding: 3rem; color: #666;">
                                <i class="fas fa-calendar-check" style="font-size: 3rem; margin-bottom: 1rem; display: block; color: #3498db;"></i>
                                <h3>Módulo de Reservas</h3>
                                <p>Vista de reservas en desarrollo...</p>
                            </div>
                        </div>
                    </div>
                `;
            }

            renderUsuarios() {
                return `
                    <!-- HEADER CONTEXTUAL PARA USUARIOS -->
                    <section class="welcome-panel">
                        <div class="page-info">
                            <h1 class="panel-title">Gestión de Usuarios</h1>
                            <div class="toolbar-inline">
                                <input type="search" placeholder="Buscar usuarios por nombre o email..." aria-label="Buscar usuarios" />
                                <button class="btn btn-secondary">
                                    <i class="fas fa-user-shield"></i> Filtrar por Rol
                                </button>
                                <button class="btn btn-success">
                                    <i class="fas fa-user-plus"></i> Nuevo Usuario
                                </button>
                            </div>
                        </div>
                    </section>

                    <div class="card">
                        <div class="card-body">
                            <div style="text-align: center; padding: 3rem; color: #666;">
                                <i class="fas fa-users" style="font-size: 3rem; margin-bottom: 1rem; display: block; color: #3498db;"></i>
                                <h3>Módulo de Usuarios</h3>
                                <p>Vista de usuarios en desarrollo...</p>
                            </div>
                        </div>
                    </div>
                `;
            }

            renderFinanciero() {
                return `
                    <!-- HEADER CONTEXTUAL PARA FINANCIERO -->
                    <section class="welcome-panel">
                        <div class="page-info">
                            <h1 class="panel-title">Panel Financiero</h1>
                            <div class="toolbar-inline">
                                <input type="search" placeholder="Buscar transacciones o reportes..." aria-label="Buscar financiero" />
                                <button class="btn btn-secondary">
                                    <i class="fas fa-chart-line"></i> Ver Gráficos
                                </button>
                                <button class="btn btn-success">
                                    <i class="fas fa-file-export"></i> Exportar Reporte
                                </button>
                            </div>
                        </div>
                    </section>

                    <div class="card">
                        <div class="card-body">
                            <div style="text-align: center; padding: 3rem; color: #666;">
                                <i class="fas fa-dollar-sign" style="font-size: 3rem; margin-bottom: 1rem; display: block; color: #3498db;"></i>
                                <h3>Módulo Financiero</h3>
                                <p>Vista financiera en desarrollo...</p>
                            </div>
                        </div>
                    </div>
                `;
            }
        }

        // Funciones para manejar modales de hoteles
        function openCreateHotelModal() {
            isEditMode = false;
            currentEditingHotelId = null;
            document.getElementById('hotelModalTitle').textContent = 'Crear Hotel';
            document.getElementById('saveHotelText').textContent = 'Crear Hotel';
            document.getElementById('hotelForm').reset();
            document.getElementById('hotelId').value = '';
            document.getElementById('hotelModal').classList.add('show');
        }

        function closeHotelModal() {
            document.getElementById('hotelModal').classList.remove('show');
            document.getElementById('hotelForm').reset();
            currentEditingHotelId = null;
            isEditMode = false;
        }

        // Funciones para manejar modales de habitaciones
        async function openCreateHabitacionModal() {
            isEditModeHabitacion = false;
            currentEditingHabitacionId = null;
            document.getElementById('habitacionModalTitle').textContent = 'Crear Habitación';
            document.getElementById('saveHabitacionText').textContent = 'Crear Habitación';
            document.getElementById('habitacionForm').reset();
            document.getElementById('habitacionId').value = '';
            document.getElementById('disponible').checked = true;
            
            document.getElementById('habitacionModal').classList.add('show');
            await loadHotelesDropdown();
        }

        function closeHabitacionModal() {
            document.getElementById('habitacionModal').classList.remove('show');
            document.getElementById('habitacionForm').reset();
            currentEditingHabitacionId = null;
            isEditModeHabitacion = false;
        }

        // Función para cargar hoteles en el dropdown
        async function loadHotelesDropdown() {
            try {
                const response = await fetch('/api/hotelesapi');
                if (!response.ok) {
                    throw new Error(`HTTP Error: ${response.status}`);
                }
                
                const hoteles = await response.json();
                const select = document.getElementById('habitacionHotelId');
                
                if (!select) {
                    throw new Error('Elemento select no encontrado');
                }

                select.innerHTML = '<option value="">Seleccionar hotel</option>';
                
                hoteles.forEach(hotel => {
                    const option = document.createElement('option');
                    const hotelId = hotel.hotelId || hotel.HotelId;
                    const hotelNombre = hotel.nombre || hotel.Nombre;
                    
                    option.value = hotelId;
                    option.textContent = hotelNombre;
                    select.appendChild(option);
                });

                return true;
            } catch (error) {
                console.error('Error al cargar hoteles:', error);
                showAlert('Error al cargar la lista de hoteles: ' + error.message, 'error');
                return false;
            }
        }

        // Función para editar hotel
        async function editHotel(hotelId) {
            try {
                const response = await fetch(`/api/hotelesapi/${hotelId}`);
                if (!response.ok) {
                    throw new Error('Hotel no encontrado');
                }
                
                const hotel = await response.json();
                
                isEditMode = true;
                currentEditingHotelId = hotelId;
                document.getElementById('hotelModalTitle').textContent = 'Editar Hotel';
                document.getElementById('saveHotelText').textContent = 'Actualizar Hotel';
                
                document.getElementById('hotelId').value = hotel.hotelId || hotel.HotelId;
                document.getElementById('nombre').value = hotel.nombre || hotel.Nombre;
                document.getElementById('direccion').value = hotel.direccion || hotel.Direccion;
                document.getElementById('ciudad').value = hotel.ciudad || hotel.Ciudad;
                document.getElementById('descripcion').value = hotel.descripcion || hotel.Descripcion || '';
                document.getElementById('telefonoContacto').value = hotel.telefonoContacto || hotel.TelefonoContacto || '';
                
                document.getElementById('hotelModal').classList.add('show');
            } catch (error) {
                showAlert('Error al cargar los datos del hotel: ' + error.message, 'error');
            }
        }

        // Función para guardar hotel
        async function saveHotel() {
            const form = document.getElementById('hotelForm');
            const saveBtn = document.getElementById('saveHotelBtn');
            const saveText = document.getElementById('saveHotelText');
            
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            saveBtn.disabled = true;
            saveText.innerHTML = '<span class="spinner"></span>Guardando...';

            try {
                const formData = new FormData(form);
                const hotelData = {
                    nombre: formData.get('nombre'),
                    direccion: formData.get('direccion'),
                    ciudad: formData.get('ciudad'),
                    descripcion: formData.get('descripcion') || null,
                    telefonoContacto: formData.get('telefonoContacto') || null
                };

                let response;
                if (isEditMode && currentEditingHotelId) {
                    response = await fetch(`/api/hotelesapi/${currentEditingHotelId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(hotelData)
                    });
                } else {
                    response = await fetch('/api/hotelesapi', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(hotelData)
                    });
                }

                const result = await response.json();

                if (response.ok && result.success) {
                    showAlert(result.message, 'success');
                    closeHotelModal();
                    await window.adminApp.loadView('hoteles');
                } else {
                    throw new Error(result.message || 'Error al guardar el hotel');
                }
            } catch (error) {
                showAlert('Error al guardar el hotel: ' + error.message, 'error');
            } finally {
                saveBtn.disabled = false;
                saveText.textContent = isEditMode ? 'Actualizar Hotel' : 'Crear Hotel';
            }
        }

        // Función para eliminar hotel
        async function deleteHotel(hotelId, hotelName) {
            if (!confirm(`¿Estás seguro de que quieres eliminar el hotel "${hotelName}"?\n\nEsta acción no se puede deshacer.`)) {
                return;
            }

            try {
                const response = await fetch(`/api/hotelesapi/${hotelId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    showAlert(result.message, 'success');
                    await window.adminApp.loadView('hoteles');
                } else {
                    throw new Error(result.message || 'Error al eliminar el hotel');
                }
            } catch (error) {
                showAlert('Error al eliminar el hotel: ' + error.message, 'error');
            }
        }

        // Funciones similares para habitaciones...
        async function editHabitacion(habitacionId) {
            try {
                const response = await fetch(`/api/habitacionesapi/${habitacionId}`);
                if (!response.ok) {
                    throw new Error('Habitación no encontrada');
                }
                
                const habitacion = await response.json();
                await loadHotelesDropdown();
                
                isEditModeHabitacion = true;
                currentEditingHabitacionId = habitacionId;
                document.getElementById('habitacionModalTitle').textContent = 'Editar Habitación';
                document.getElementById('saveHabitacionText').textContent = 'Actualizar Habitación';
                
                document.getElementById('habitacionId').value = habitacion.habitacionId || habitacion.HabitacionId;
                document.getElementById('habitacionHotelId').value = habitacion.hotelId || habitacion.HotelId;
                document.getElementById('numeroHabitacion').value = habitacion.numeroHabitacion || habitacion.NumeroHabitacion;
                document.getElementById('tipo').value = habitacion.tipo || habitacion.Tipo;
                document.getElementById('capacidad').value = habitacion.capacidad || habitacion.Capacidad;
                document.getElementById('precioNoche').value = habitacion.precioNoche || habitacion.PrecioNoche;
                document.getElementById('descripcionHab').value = habitacion.descripcion || habitacion.Descripcion || '';
                document.getElementById('disponible').checked = habitacion.disponible !== false && habitacion.Disponible !== false;
                
                document.getElementById('habitacionModal').classList.add('show');
            } catch (error) {
                showAlert('Error al cargar los datos de la habitación: ' + error.message, 'error');
            }
        }

        async function saveHabitacion() {
            const form = document.getElementById('habitacionForm');
            const saveBtn = document.getElementById('saveHabitacionBtn');
            const saveText = document.getElementById('saveHabitacionText');
            
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            saveBtn.disabled = true;
            saveText.innerHTML = '<span class="spinner"></span>Guardando...';

            try {
                const formData = new FormData(form);
                const habitacionData = {
                    hotelId: parseInt(formData.get('hotelId')),
                    numeroHabitacion: formData.get('numeroHabitacion'),
                    tipo: formData.get('tipo'),
                    capacidad: parseInt(formData.get('capacidad')),
                    precioNoche: parseFloat(formData.get('precioNoche')),
                    descripcion: formData.get('descripcionHab') || null,
                    disponible: formData.get('disponible') === 'on'
                };

                let response;
                if (isEditModeHabitacion && currentEditingHabitacionId) {
                    response = await fetch(`/api/habitacionesapi/${currentEditingHabitacionId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(habitacionData)
                    });
                } else {
                    response = await fetch('/api/habitacionesapi', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(habitacionData)
                    });
                }

                const result = await response.json();

                if (response.ok && result.success) {
                    showAlert(result.message, 'success');
                    closeHabitacionModal();
                    await window.adminApp.loadView('habitaciones');
                } else {
                    throw new Error(result.message || 'Error al guardar la habitación');
                }
            } catch (error) {
                showAlert('Error al guardar la habitación: ' + error.message, 'error');
            } finally {
                saveBtn.disabled = false;
                saveText.textContent = isEditModeHabitacion ? 'Actualizar Habitación' : 'Crear Habitación';
            }
        }

        async function deleteHabitacion(habitacionId, numeroHabitacion) {
            if (!confirm(`¿Estás seguro de que quieres eliminar la habitación "${numeroHabitacion}"?\n\nEsta acción no se puede deshacer.`)) {
                return;
            }

            try {
                const response = await fetch(`/api/habitacionesapi/${habitacionId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    showAlert(result.message, 'success');
                    await window.adminApp.loadView('habitaciones');
                } else {
                    throw new Error(result.message || 'Error al eliminar la habitación');
                }
            } catch (error) {
                showAlert('Error al eliminar la habitación: ' + error.message, 'error');
            }
        }

        // Función para mostrar alertas
        function showAlert(message, type = 'success') {
            const alertContainer = document.getElementById('alert-container');
            const alertId = 'alert_' + Date.now();
            
            const alertHtml = `
                <div id="${alertId}" class="alert alert-${type} show">
                    ${message}
                </div>
            `;
            
            alertContainer.innerHTML = alertHtml;
            
            setTimeout(() => {
                const alertElement = document.getElementById(alertId);
                if (alertElement) {
                    alertElement.classList.remove('show');
                    setTimeout(() => {
                        alertContainer.innerHTML = '';
                    }, 300);
                }
            }, 5000);
        }

        // Función global para navegación
        function navigateTo(view) {
            window.adminApp.currentView = view;
            window.adminApp.loadView(view);
        }

        // Event listeners
        window.onclick = function(event) {
            const hotelModal = document.getElementById('hotelModal');
            const habitacionModal = document.getElementById('habitacionModal');
            if (event.target === hotelModal) {
                closeHotelModal();
            }
            if (event.target === habitacionModal) {
                closeHabitacionModal();
            }
        }

        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeHotelModal();
                closeHabitacionModal();
            }
        });

        // Inicializar la app
        document.addEventListener('DOMContentLoaded', function() {
            window.adminApp = new AdminApp();
        });
    </script>
</body>
</html>